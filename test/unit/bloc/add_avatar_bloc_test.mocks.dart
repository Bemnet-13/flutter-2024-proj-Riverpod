// Mocks generated by Mockito 5.4.4 from annotations
// in FantasyE/test/unit/bloc/add_avatar_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:FantasyE/domain/avatar/avatar.dart' as _i6;
import 'package:FantasyE/domain/avatar/avatar_failure.dart' as _i5;
import 'package:FantasyE/domain/avatar/i_avatar_repository.dart' as _i3;
import 'package:FantasyE/domain/core/value_objects.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAvatarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAvatarRepository extends _i1.Mock implements _i3.IAvatarRepository {
  MockIAvatarRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>> watchAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>>.value(
                _FakeEither_0<_i5.AvatarFailure, List<_i6.Avatar>>(
          this,
          Invocation.method(
            #watchAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> create(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> update(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #update,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> delete(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #delete,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> add(
          _i7.UniqueId? avatarId) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [avatarId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #add,
            [avatarId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);
}

/// A class which mocks [IAvatarRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvatarRepositoryUnique extends _i1.Mock
    implements _i3.IAvatarRepository {
  MockAvatarRepositoryUnique() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>> watchAll() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAll,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>>.value(
                _FakeEither_0<_i5.AvatarFailure, List<_i6.Avatar>>(
          this,
          Invocation.method(
            #watchAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, List<_i6.Avatar>>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> create(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #create,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> update(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #update,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> delete(
          _i6.Avatar? avatar) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [avatar],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #delete,
            [avatar],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>> add(
          _i7.UniqueId? avatarId) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [avatarId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.AvatarFailure, _i2.Unit>(
          this,
          Invocation.method(
            #add,
            [avatarId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AvatarFailure, _i2.Unit>>);
}
